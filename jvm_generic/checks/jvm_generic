#!/usr/bin/python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#################################################################
#---------------------------------------------------------------#
# Author: Markus Weber                                          #
# Contact: markus.weber@lfst.bayern.de                          #
# License: GPL                                                  #
# File: jvm_generic                                             #
# Version: 2.2.7                                                #
# Revision: 11.11.2024                                          #
# Description: This Check allows to monitor any given           #
#  MBean/Attribute of an Application server.                    #
#################################################################

# Sample output
# <<<jvm_generic>>>
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p99 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-min 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-max 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-mean 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p50 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p999 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-stddev 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p95 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p98 0.0
# cloud-mailing send_confirmation_email_change generic.gauge.Timer.duration-p75 0.0


# Default levels for low warn, low crit, high warn, high crit and a empty list for string mode
factory_settings["jvm_generic_default_levels"] = { "levels" : [(-1.0, -1.0, 0.0, 0.0, '')], "expectedStrings" : [] }

def savefloat(value):
    return float(value) if value else 0

# Fix info list lengths if string type contains whitespaces
def fix_strings_with_whitespaces(info):
    for idx, line in enumerate(info):
        if len(line) > 3:
            info[idx] = line[0], line[1], " ".join(line[2:])

def inventory_jvm_generic(info):
    inv = []
    fix_strings_with_whitespaces(info)
    parsed = jolokia_metrics_parse(info)

    for inst, vals in parsed.items():
        for app, appstate in vals.get('apps', {}).items():
            if 'servlets' in appstate:
                for servlet in appstate['servlets']:
                    #for Attribute in appstate['servlets'][servlet]:
                    for key in appstate['servlets'][servlet]:
                            if key.startswith("generic."):
                                keyparts = key.split(".")
                                if (len(keyparts) == 4 or len(keyparts) == 3) and ('%s %s %s %s' % (inst, app, servlet, keyparts[2]), {}) not in inv:
                                        inv.append( ('%s %s %s %s' % (inst, app, servlet, keyparts[2]), {} ) )
                                else:
                                    continue

            for key in appstate:
                if key.startswith("generic."):
                    keyparts = key.split(".")
                    if (len(keyparts) == 3 or len(keyparts) == 4) and ('%s %s %s' % (inst, app, keyparts[2]), {}) not in inv:
                        # keyparts[2] is either the attribute or the grouping name for rate and gauge values
                        inv.append( ('%s %s %s' % (inst, app, keyparts[2]), {} ) )
                    else:
                        continue

        for key in vals:
            if key.startswith("generic."):
                keyparts = key.split(".")
                if (len(keyparts) == 4 or len(keyparts) == 3) and ('%s %s' % (inst, keyparts[2]), {}) not in inv:
                    inv.append( ('%s %s' % (inst, keyparts[2]), {} ) )
                else:
                    continue
    return inv

def check_jvm_generic(item, params, info):
    import re
    fix_strings_with_whitespaces(info)
    parsed = jolokia_metrics_parse(info)
    itemParts = item.split()
    output, perf, status, workvalues, workitems, workmodes = "", [], 0, [], [], []

    if len(itemParts) == 4 and len(parsed) > 0:
        if itemParts[2] in parsed[itemParts[0]]['apps'][itemParts[1]]['servlets']:
            base = parsed[itemParts[0]]['apps'][itemParts[1]]['servlets'].get( itemParts[2], {} )
    elif len(itemParts) == 3 and len(parsed) > 0:
        if itemParts[1] in parsed[itemParts[0]]['apps']:
            base = parsed[itemParts[0]]['apps'].get( itemParts[1], {} )
    elif len(itemParts) == 2:
        base = parsed.get( itemParts[0], {} )
    else:
        base = {}

    for key in base:
        if key.startswith("generic.rate." + itemParts[-1]):
            workmodes.append('rate')
            workvalues.append(savefloat(base[key]))
        elif key.startswith("generic.gauge." + itemParts[-1]):
            workmodes.append('gauge')
            workvalues.append(savefloat(base[key]))
        elif key.startswith("generic.string." + itemParts[-1]):
            workmodes.append('string')
            workvalues.append(base[key])
        else:
            continue
        workitems.append(key.split('.')[-1])

    if not workitems:
        raise MKCounterWrapped("Service is stale, found no data for: %s " % (item))

    if workmodes[0] == 'gauge':
        for i in range(len(workitems)):
            thresholds = [p for p in params["levels"] if p[4] == workitems[i] or p[4] == '' ]

            if thresholds:
                lo_warn, lo_crit, hi_warn, hi_crit, notused = thresholds[0]
            else:
                lo_warn, lo_crit, hi_warn, hi_crit, notused = factory_settings["jvm_generic_default_levels"]["levels"][0]

            if lo_crit is not None and workvalues[i] <= lo_crit:
                status = 2
                output += "%s is %s (!!); " % (workitems[i], workvalues[i])

            elif lo_warn is not None and workvalues[i] <= lo_warn:
                status = 1
                output += "%s is %s (!); " % (workitems[i], workvalues[i])

            elif hi_crit is not None and hi_crit != 0.0 and workvalues[i] >= hi_crit:
                status = 2
                output += "%s is %s (!!); " % (workitems[i], workvalues[i])

            elif hi_warn is not None and hi_warn != 0.0 and workvalues[i] >= hi_warn:
                status = 1
                output += "%s is %s (!); " % (workitems[i], workvalues[i])

            else:
                output += "%s is %s; " % (workitems[i], workvalues[i])

            try:
                workvalues[i] += 1
                workvalues[i] -= 1
                perf.append((workitems[i], workvalues[i]))
            except TypeError:
                pass

    elif workmodes[0] == 'string':
        for i in range(len(workitems)):
            regexes = []
            if len(params["expectedStrings"]) != 0:
                for j in params["expectedStrings"]:
                    regexes.append(re.compile(j))

                if not any(regex.match(workvalues[i]) for regex in regexes):
                    status = 2
                    output += "%s is %s (!!); " % (workitems[i], workvalues[i])
                else:
                    output += "%s is %s; " % (workitems[i], workvalues[i])
            else:
                output += "%s is %s; " % (workitems[i], workvalues[i])
    else:
        if len(workitems) == 1:
            thresholds = [p for p in params["levels"] if p[4] == workitems[0] or p[4] == '' ]
            if thresholds:
                lo_warn, lo_crit, hi_warn, hi_crit, notused = thresholds[0]
            else:
                lo_warn, lo_crit, hi_warn, hi_crit, notused = factory_settings["jvm_generic_default_levels"]["levels"][0]

            # rate per minute
            timedif, rate = get_counter( "jvm_generic.%s" % (itemParts[-1]), time.time(), savefloat(workvalues[0]) )
            rate = rate * 60.0

            if lo_crit is not None and rate <= lo_crit:
                status = 2
                output += "%.2f %s/min (!!) with a total of %.2f" % (rate, workitems[0], savefloat(workvalues[0]))

            elif lo_warn is not None and rate <= lo_warn:
                status = 1
                output += "%.2f %s/min (!) with a total of %.2f" % (rate, workitems[0], savefloat(workvalues[0]))

            elif hi_crit is not None and hi_crit != 0.0 and rate >= hi_crit:
                status = 2
                output += "%.2f %s/min (!!) with a total of %.2f" % (rate, workitems[0], savefloat(workvalues[0]))

            elif hi_warn is not None and hi_warn != 0.0 and rate >= hi_warn:
                status = 1
                output += "%.2f %s/min (!) with a total of %.2f" % (rate, workitems[0], savefloat(workvalues[0]))

            else:
                output += "%.2f %s/min with a total of %.2f" % (rate, workitems[0], savefloat(workvalues[0]))

            perf.append( (workitems[0], rate) )
        elif len(workitems) == 2:
            lo_warn, lo_crit, hi_warn, hi_crit, notused = params["levels"][0]

            if workvalues[0] == 0 and workvalues[1] == 0:
                rate = 0
                output += "The rate of %s / %s = %.2f" % (workitems[1], workitems[0], rate)
                perf.append( ("%sPER%s" % (workitems[1], workitems[0]), rate) )
            elif workvalues[0] > workvalues[1]:
                # rate of 2 values 
                rate = savefloat(workvalues[1])/savefloat(workvalues[0])
                output += "The rate of %s / %s = %.2f" % (workitems[1], workitems[0], rate)
                perf.append( ("%sPER%s" % (workitems[1], workitems[0]), rate) )
            else:
                # rate of 2 values reverse
                rate = savefloat(workvalues[0])/savefloat(workvalues[1])
                output += "The rate of %s / %s = %.2f" % (workitems[0], workitems[1], rate)
                perf.append( ("%sPER%s" % (workitems[0], workitems[1]), rate) )

            if lo_crit is not None and rate <= lo_crit:
                status = 2
            elif lo_warn is not None and rate <= lo_warn:
                status = 1
            elif hi_crit is not None and hi_crit != 0.0 and rate >= hi_crit:
                status = 2
            elif hi_warn is not None and hi_warn != 0.0 and rate >= hi_warn:
                status = 1
        else:
            status = 3
            output += "something went wrong! Found more then 2 values in rate mode."
    return (status, output, perf)

check_info["jvm_generic"] = {
    "service_description"     : "JVM %s",
    "check_function"          : check_jvm_generic,
    "inventory_function"      : inventory_jvm_generic,
    "default_levels_variable" : "jvm_generic_default_levels",
    "group"                   : "jvm_generic",
    "includes"                : [ "jolokia_metrics" ],
    "has_perfdata"            : True,
}